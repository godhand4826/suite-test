// Code generated by mockery v2.43.2. DO NOT EDIT.

package user

import (
	user "suite-test/user"

	mock "github.com/stretchr/testify/mock"
)

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// Find provides a mock function with given fields: id
func (_m *MockUserService) Find(id int) (user.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (user.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) user.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockUserService_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - id int
func (_e *MockUserService_Expecter) Find(id interface{}) *MockUserService_Find_Call {
	return &MockUserService_Find_Call{Call: _e.mock.On("Find", id)}
}

func (_c *MockUserService_Find_Call) Run(run func(id int)) *MockUserService_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockUserService_Find_Call) Return(_a0 user.User, _a1 error) *MockUserService_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_Find_Call) RunAndReturn(run func(int) (user.User, error)) *MockUserService_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: name, email
func (_m *MockUserService) Register(name string, email string) (user.User, error) {
	ret := _m.Called(name, email)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (user.User, error)); ok {
		return rf(name, email)
	}
	if rf, ok := ret.Get(0).(func(string, string) user.User); ok {
		r0 = rf(name, email)
	} else {
		r0 = ret.Get(0).(user.User)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(name, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type MockUserService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - name string
//   - email string
func (_e *MockUserService_Expecter) Register(name interface{}, email interface{}) *MockUserService_Register_Call {
	return &MockUserService_Register_Call{Call: _e.mock.On("Register", name, email)}
}

func (_c *MockUserService_Register_Call) Run(run func(name string, email string)) *MockUserService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_Register_Call) Return(_a0 user.User, _a1 error) *MockUserService_Register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserService_Register_Call) RunAndReturn(run func(string, string) (user.User, error)) *MockUserService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
